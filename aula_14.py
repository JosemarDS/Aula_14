# -*- coding: utf-8 -*-
"""Aula_14

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18UynKPjCEXpuBqYFhEiQ-qWjiPNR09cE

**MÉTODO POP COM LISTAS E DICONÁRIOS:**

O método `pop()` em Python é usado para remover um elemento de uma lista (ou um item de um dicionário) com base no índice especificado. O método `pop()` retorna o valor do elemento removido.

Aqui está a sintaxe básica do método `pop()`:
"""

lista.pop(indice)

"""onde:

- `lista` é a lista da qual você deseja remover um elemento.
- `indice` é o índice do elemento que você deseja remover.

Vamos ver um exemplo de uso do método `pop()` com uma lista:
"""

frutas = ["maçã", "banana", "laranja", "uva"]
fruta_removida = frutas.pop(1)  # Remove o elemento com índice 1 (banana)
print(frutas)  # A lista agora é ["maçã", "laranja", "uva"]
print("Fruta removida:", fruta_removida)  # Isso imprimirá "Fruta removida: banana"

"""Observe que o índice especificado deve estar dentro dos limites da lista. Se o índice estiver fora dos limites, você receberá um erro `IndexError`. Se você não especificar um índice, `pop()` removerá o último elemento da lista por padrão.

Além disso, você também pode usar o método `pop()` com dicionários para remover um item com uma chave específica:
"""

dicionario = {"chave1": "valor1", "chave2": "valor2", "chave3": "valor3"}
item_removido = dicionario.pop("chave2")  # Remove o item com chave "chave2"
print(dicionario)  # O dicionário agora é {"chave1": "valor1", "chave3": "valor3"}
print("Item removido:", item_removido)  # Isso imprimirá "Item removido: valor2"

"""Lembre-se de que, ao usar o método pop() com dicionários, é importante especificar a chave que deseja remover.

Exemplos:
"""

lista = [1,2,3,6,12,45,78]
print(lista)
lista.pop()  #nas listas[] o pop() tira o índece que a gente quiser.
print(lista)
lista.pop(0)
print(lista)
lista.pop(2)
print(lista)
n = {1,2,3,4,5,6,12}
n.pop() #
print(n)

"""**MÉTODO JOIN EM PYTHON**

O método `join()` em Python é usado para concatenar elementos de uma sequência (geralmente uma lista) em uma única string. Ele é chamado em uma string que atua como um "separador" e recebe uma sequência como argumento. O método `join()` cria uma nova string onde os elementos da sequência são separados pelo separador especificado.

Aqui está a sintaxe básica do método `join()`:

separador.join(sequencia)

string.join(iterable)

onde:

- `separador` é a string que será usada para separar os elementos da sequência.
- `sequencia` é a sequência da qual você deseja concatenar os elementos em uma única string.

Aqui está um exemplo de uso do método `join()` com uma lista:
"""

palavras = ["Olá", "mundo", "em", "Python!"]
frase = " ".join(palavras)  # Concatena os elementos da lista com um espaço em branco entre eles
print(frase)  # Isso imprimirá "Olá mundo em Python"

"""No exemplo acima, o método `join(" ")` concatena os elementos da lista `palavras` em uma única string, separando-os com um espaço em branco.

Você pode usar qualquer string como separador. Por exemplo:
"""

numeros = ["1", "2", "3", "4", "5"]
csv = ",".join(numeros)  # Concatena os elementos da lista com vírgulas entre eles
print(csv)  # Isso imprimirá "1,2,3,4,5"

text = 'Puxa vida sextou!'
a = '2Bom dia '.join(text)
print(a)

"""O método `join()` é muito útil quando você precisa construir strings a partir de elementos em uma sequência, economizando tempo e tornando o código mais legível.

**INDEXAÇÃO EM PYTHON**

Em Python, a indexação usando `:` em uma sequência, como uma string, lista ou tupla, é usada para criar fatias (slices) dessa sequência. A notação geral é `[começo:fim]`, onde:

- `começo`: O índice onde a fatia começa (inclusive).
- `fim`: O índice onde a fatia termina (exclusivo).

Se você omitir `começo`, a fatia começará do início da sequência. Se você omitir `fim`, a fatia irá até o final da sequência. Veja alguns exemplos:
"""

minha_string = "Olá, Mundo!"

# Obtém os primeiros 5 caracteres da string
parte1 = minha_string[:5]  # "Olá, "
print(parte1)
# Obtém os caracteres da posição 7 até o final da string
parte2 = minha_string[5:]  # "Mundo!"
print(parte2)
# Obtém os caracteres da posição 2 até a posição 4 (exclusivo)
parte3 = minha_string[2:5]  # "á,"
print(parte3)
# Obtém todos os caracteres da string (equivalente a não especificar começo e fim)
toda_string = minha_string[:]  # "Olá, Mundo!"
print(toda_string)
# Você também pode usar índices negativos para contar a partir do final da sequência
final_da_string = minha_string[-6:]  # "Mundo!"
print(final_da_string)

frase = 'Guarulhos é uma cidade'
n = frase[:22]
print(n)

"""Note que a indexação com : é muito flexível e pode ser usada em uma variedade de sequências em Python, como strings, listas e tuplas, para criar fatias das mesmas."""

numero = "numero "
parte_da_string = numero[4:]
print(parte_da_string)

"""Isso criará uma nova variável chamada `parte_da_string` que conterá os caracteres da string original "numero " a partir da quinta posição em diante, ou seja, "ro ".

Aqui está o código corrigido:
"""

numero = "numero "
parte_da_string = numero[4:]
print(parte_da_string)  # Isso imprimirá "ro "

"""Lembre-se de que a indexação em Python começa em 0, então numero[4] retorna o quarto caractere da string original, que é "e". A partir do quinto caractere em diante é obtido usando numero[4:]."""

1: Remova o último elemento de uma lista e imprima a lista resultante.

lista0 = [1, 2, 3, 4, 5]
ultimo_elemento = lista0.pop(-1)
print(ultimo_elemento)
print(lista0)

"""2: Remova o elemento de índice 2 de uma lista e imprima a lista resultante"""

lista00 = [10, 20, 30, 40, 50]
remove_indece_2 = lista00.pop(2)
print(remove_indece_2)
print(lista00)

"""3: Crie uma pilha usando uma lista e implemente as operações append() e pop()."""

lista0 = [1, 2, 3, 4, 5]
lista0.push(7)
print(pilha)

"""4: Remova o primeiro elemento de uma lista e o último elemento usando pop() e imprima a lista resultante."""

lista0 = [1, 2, 3, 4, 5]
ultimo_element = lista0.pop(-1)
primeiro_element = lista0.pop(0)
print(lista0)

"""5: Acesse os três primeiros caracteres de uma string.

"""

frase0 = 'Amo a minha Família!'
parte_da_frase = frase0[:3]
print(parte_da_frase)

"""6: Acesse todos os elementos de uma lista, exceto o primeiro e o último."""

lista0 = [1, 2, 3, 4, 5]
ultimo_element = lista0.pop(-1)
primeiro_element = lista0.pop(0)
print(lista0)

"""# <**Desafio: Calculadora de Média >**

Instruções:

1. Peça ao usuário que insira três notas (por exemplo, de 0 a 10).
2. Use a função **`input()`** para obter as notas como entrada do usuário e converta-as em números de ponto flutuante.
3. Calcule a média das três notas.
4. Com base na média, forneça uma avaliação:
    - Se a média for maior ou igual a 7, imprima "Aprovado".
    - Se a média for maior ou igual a 5 e menor do que 7, imprima "Recuperação".
    - Se a média for menor do que 5, imprima "Reprovado".
5. Certifique-se de lidar com possíveis erros, como entradas inválidas (por exemplo, notas fora do intervalo de 0 a 10).

A SAÍDA PRECISA FICAR ASSIM NÃO COM OS MESMOS NÚMEROS, MAS PRECISA SER ASSIM:


Por favor, insira a primeira nota: 8.5

Por favor, insira a segunda nota: 6.0

Por favor, insira a terceira nota: 4.5


Sua média é 6.333333333333333 e você está em Recuperação.
"""

while nota
Matemática = float(input('Por favor, insira a primeira nota: '))
Português = float(input('Por favor, insira a segunda nota: '))
Química = float(input('Por favor, insira a terceira nota: '))
nota = float(Matemática + Português + Química)/3
print(nota)


while nota == 10:
  print(Aprovado)
if nota < 7:
  print('Recuperação')
elif nota < 5:
  print('Reprovado')